// scss-lint:disable ImportantRule
//
//---------------------------
//
// Layout Helpers
//
//---------------------------

// Islands are the most common layout helper. They throw a padding around the
// selected element equal to the global baseline.
//
// Each layout helper has a vertical modifier ('*--v') to apply only
// top/bottom padding
//
.u-l-island,
%u-l-island {
    padding: $DBbaseline;

    &-v {
        @include share(padding-top, padding-bottom, $DBbaseline);
    }
}

// Half an island
.u-l-isle,
%u-l-isle {
    padding: half($DBbaseline);

    &-v {
        @include share(padding-top, padding-bottom, half($DBbaseline));
    }
}

// Half an isle
.u-l-spit,
%u-l-spit {
    padding: quarter($DBbaseline);

    &-v {
        @include share(padding-top, padding-bottom, quarter($DBbaseline));
    }
}

// Twice the size of an island
.u-l-country,
%u-l-country {
    padding: double($DBbaseline);

    &-v {
        @include share(padding-top, padding-bottom, double($DBbaseline));
    }
}

// Twice the size of a country
.u-l-continent,
%u-l-continent {
    padding: quadruple($DBbaseline);

    &-v {
        @include share(padding-top, padding-bottom, quadruple($DBbaseline));
    }
}

// Margin layout helpers
// =====================
//
// Typically, we want most elements to have the same vertical spacing, often
// just with a margin-bottom.
//
// The most basic element with this spacing is a paragraph, hence the 'l-p'
// selector name.
//
// Only two modifiers here: half- and double-spacing.
//
// Vertical margins are strictly applied to the bottom edge only, with the
// exception of negative margin-top values.
//
$DBlayoutHelperDirections: 'top', 'right', 'bottom', 'left';
@each $direction in $DBlayoutHelperDirections {
    $micro: str-slice($direction, 1, 1);

    .u-l-m#{$micro},
    %u-l-m#{$micro} {
        // We always want helper classes to trump other values, hence the !important here
        margin-#{$direction}: $DBbaseline !important;

        &-xs {
            margin-#{$direction}: round($DBbaseline / 4) !important;
        }

        &-s {
            margin-#{$direction}: round($DBbaseline / 2) !important;
        }

        &-l {
            margin-#{$direction}: round($DBbaseline * 2) !important;
        }

        &-xl {
            margin-#{$direction}: round($DBbaseline * 4) !important;
        }
    }
}

.u-l-p,
%u-l-p {
    @extend %u-l-mb;

    &-dbl {
        @extend %u-l-mbl;
    }

    &-hlf {
        @extend %u-l-mbs;
    }
}

.u-l-trim,
%u-l-trim {
    margin: 0 !important;
}

// Floats
// ======
//
.u-l-fl,
%u-l-fl {
    float: left !important;
}

.u-l-fr,
%u-l-fr {
    float: right !important;
}

// Display types
// =============
//
.u-l-b,
%u-l-b {
    display: block !important;
}

.u-l-ib,
%u-l-ib {
    display: inline-block !important;

    &#{&}--m {
        vertical-align: middle;
    }
}
